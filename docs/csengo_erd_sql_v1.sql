-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Kreta"
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    om bigint NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "createdAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "Kreta_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."PendingSong"
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    title character varying(255) COLLATE pg_catalog."default",
    "createdAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "songBucketId" uuid NOT NULL,
    "uploadedById" uuid NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000'::uuid,
    CONSTRAINT "PendingSong_pkey" PRIMARY KEY (id)
);
docker run --mount type=bind,source="$(pwd)",target=/home/schcrwlr/share --rm -it schemacrawler/schemacrawler /opt/schemacrawler/bin/schemacrawler.sh --server=postgresql --database=csengo --port=5582 --user=csengo --host=localhost --password=csengo --info-level=standard --command script --script-language python --script ./share/mermaid.py > ./output_pg.md
CREATE TABLE IF NOT EXISTS public."Role"
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    role text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Role_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."Song"
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    title character varying(255) COLLATE pg_catalog."default",
    "createdAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "songBucketId" uuid NOT NULL,
    "uploadedById" uuid NOT NULL DEFAULT '00000000-0000-0000-0000-000000000000'::uuid,
    CONSTRAINT "Song_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."SongBucket"
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    path character varying(500) COLLATE pg_catalog."default" NOT NULL,
    "createdAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "SongBucket_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."User"
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "createdAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "kretaId" uuid NOT NULL,
    CONSTRAINT "User_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."Vote"
(
    id serial NOT NULL,
    "userId" uuid NOT NULL,
    "songId" uuid NOT NULL,
    "sessionId" uuid NOT NULL,
    "createdAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "Vote_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."VotingSession"
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    "songNames" text[] COLLATE pg_catalog."default",
    start timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "end" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "createdAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT "VotingSession_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."_RoleToUser"
(
    "A" uuid NOT NULL,
    "B" uuid NOT NULL,
    CONSTRAINT "_RoleToUser_AB_pkey" PRIMARY KEY ("A", "B")
);

CREATE TABLE IF NOT EXISTS public."_SongToVotingSession"
(
    "A" uuid NOT NULL,
    "B" uuid NOT NULL,
    CONSTRAINT "_SongToVotingSession_AB_pkey" PRIMARY KEY ("A", "B")
);

CREATE TABLE IF NOT EXISTS public._prisma_migrations
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    checksum character varying(64) COLLATE pg_catalog."default" NOT NULL,
    finished_at timestamp with time zone,
    migration_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    logs text COLLATE pg_catalog."default",
    rolled_back_at timestamp with time zone,
    started_at timestamp with time zone NOT NULL DEFAULT now(),
    applied_steps_count integer NOT NULL DEFAULT 0,
    CONSTRAINT _prisma_migrations_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."PendingSong"
    ADD CONSTRAINT "PendingSong_songBucketId_fkey" FOREIGN KEY ("songBucketId")
    REFERENCES public."SongBucket" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "PendingSong_songBucketId_key"
    ON public."PendingSong"("songBucketId");


ALTER TABLE IF EXISTS public."PendingSong"
    ADD CONSTRAINT "PendingSong_uploadedById_fkey" FOREIGN KEY ("uploadedById")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public."Song"
    ADD CONSTRAINT "Song_songBucketId_fkey" FOREIGN KEY ("songBucketId")
    REFERENCES public."SongBucket" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "Song_songBucketId_key"
    ON public."Song"("songBucketId");


ALTER TABLE IF EXISTS public."Song"
    ADD CONSTRAINT "Song_uploadedById_fkey" FOREIGN KEY ("uploadedById")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public."User"
    ADD CONSTRAINT "User_kretaId_fkey" FOREIGN KEY ("kretaId")
    REFERENCES public."Kreta" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "User_kretaId_key"
    ON public."User"("kretaId");


ALTER TABLE IF EXISTS public."Vote"
    ADD CONSTRAINT "Vote_sessionId_fkey" FOREIGN KEY ("sessionId")
    REFERENCES public."VotingSession" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Vote"
    ADD CONSTRAINT "Vote_songId_fkey" FOREIGN KEY ("songId")
    REFERENCES public."Song" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."Vote"
    ADD CONSTRAINT "Vote_userId_fkey" FOREIGN KEY ("userId")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."_RoleToUser"
    ADD CONSTRAINT "_RoleToUser_A_fkey" FOREIGN KEY ("A")
    REFERENCES public."Role" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."_RoleToUser"
    ADD CONSTRAINT "_RoleToUser_B_fkey" FOREIGN KEY ("B")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "_RoleToUser_B_index"
    ON public."_RoleToUser"("B");


ALTER TABLE IF EXISTS public."_SongToVotingSession"
    ADD CONSTRAINT "_SongToVotingSession_A_fkey" FOREIGN KEY ("A")
    REFERENCES public."Song" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public."_SongToVotingSession"
    ADD CONSTRAINT "_SongToVotingSession_B_fkey" FOREIGN KEY ("B")
    REFERENCES public."VotingSession" (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "_SongToVotingSession_B_index"
    ON public."_SongToVotingSession"("B");

END;